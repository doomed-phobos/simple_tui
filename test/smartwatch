#include "tui/system.hpp"
#include "tui/menu.hpp"
#include "tui/log.hpp"

#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>
#include <bluetooth/hci_lib.h>
#include <blepp/blestatemachine.h>
#include <ctime>

using namespace tui::formats;

tm* get_current_time() {
   time_t t = time(nullptr);
   return localtime(&t);
}

class App {
public:
   bool init() {
      m_sys = tui::System::TryCreate();
      if(!m_sys)
         return false;

      BLEPP::log_level = (BLEPP::LogLevels)-1;

      m_gatt.cb_disconnected = [] (BLEPP::BLEGATTStateMachine::Disconnect d) {
         if(d.reason != BLEPP::BLEGATTStateMachine::Disconnect::ConnectionClosed) {
            WARNING("BLEPP: Disconnected for reason '%s'\n", BLEPP::BLEGATTStateMachine::get_disconnect_string(d));
         }
      };

      m_menu.addOption("Sincronizar").setOnListener([this] (auto& /*o*/) {
         INFO("Intentando conectarse al dispositivo '%s'...\n", s_MAC);
         try {
            m_gatt.connect_blocking(s_MAC);
         } catch(const std::runtime_error& e) {
            ERROR("Error al intentar conectarse con el dispositivo: %s\n", e.what());
            instance->waitKeyDown();
            return;
         }
         INFO("Dispositivo conectado!!!\n");

         auto tm_s = get_current_time();
         const uint8_t bytes[] = {
            0xba,
            0x20,
            0x00,
            0x0c,
            0x00,
            0x66,
            0x00,
            0x05,
            0x02,
            0x00,
            0x20,
            0x00,
            0x07,
            (tm_s->tm_year + 1900) % 100, // Año
            tm_s->tm_mon + 1, // Mes
            tm_s->tm_mday, // Dia
            tm_s->tm_hour, // Horas
            tm_s->tm_min, // Minutos
            20, // Segundos
            0x00 // 12 hour (another that 1) or 24 hour (0)
         };
         INFO("Reloj configurado %d:%d:%d %d/%d/%d\n", bytes[16], bytes[17], bytes[18], bytes[15], bytes[14], bytes[13]);

         m_gatt.send_write_request(0x0026, bytes, 20);
         m_gatt.close();

         instance->waitKeyDown();
      });
      m_menu.addOption("Salir").setOnListener([this] (auto& /*o*/) {m_running = false;});
      m_menu.build();

      m_running = true;
      return true;
   };

   int run() {
      INFO("Verificando si el bluetooth está abierto\n");
      if(!is_bluetooth_open()) {
         ERROR("Error al intentar leer el driver del Bluetooth. Verifique si está instalado o encendido\n");
         // FIXME: Al presionar Alt + Up lo lee, evitar que lea teclas especiales
         m_sys->waitKeyDown();
         return 1;
      }

      while(m_running) {
         m_sys->clear();
         m_sys->print(
R"(+====================+
|  SMARTWATCH ver 1.1  |
|            by phobos |
+======================+
)");

         m_menu.draw();      
         tui::KeyCode keycode = m_sys->waitKeyDown();
         m_menu.event(keycode);
      }

      m_sys->print("Presione cualquier tecla para salir.\n");
      m_sys->waitKeyDown();
      return 0;
   }
private:
   static inline const char* s_MAC = "FC:3B:15:35:54:F7";

   static bool is_bluetooth_open() {
      return hci_get_route(nullptr) != -1;
   }

   std::shared_ptr<tui::System> m_sys;
   tui::Menu m_menu;
   bool m_running = false;
   BLEPP::BLEGATTStateMachine m_gatt;
};

int main() {
   App app;
   if(!app.init()) {
      fprintf(stderr, "Failed to init tui::System\n");
      return 1;
   }

   return app.run();
}